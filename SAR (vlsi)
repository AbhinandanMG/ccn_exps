module controller(clk,go,valid,result, sample,value,cmp);
input clk; 
input go; 
output valid; 
output [7:0] result; 
output sample; 
output [7:0] value; 
input cmp;
reg [1:0] state; 
reg [7:0] mask;
reg [7:0] result; 
parameter sWait=0, sSample=1, sConv=2, sDone=3;
always @(posedge clk) begin
if (!go) state <= sWait; 
else case (state) 
sWait : state <= sSample;
sSample :
begin 
state <= sConv; 
mask <= 8'b10000000; 
result <= 8'b0; 
end
sConv :
begin
if (cmp) result <= result | mask;
mask <= mask>>1;
if (mask[0]) state <= sDone;
end
sDone :;
endcase
end
assign sample = state==sSample;
assign value = result | mask;
assign valid = state==sDone;
endmodule
